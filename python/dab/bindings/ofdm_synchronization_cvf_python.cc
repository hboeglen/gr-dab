/*
 * Copyright 2023 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(ofdm_synchronization_cvf.h) */
/* BINDTOOL_HEADER_FILE_HASH(e4e04900c667ea06e05066cdd1175a9d)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/dab/ofdm_synchronization_cvf.h>
// pydoc.h is automatically generated in the build directory
#include <ofdm_synchronization_cvf_pydoc.h>

void bind_ofdm_synchronization_cvf(py::module& m)
{

    using ofdm_synchronization_cvf = ::gr::dab::ofdm_synchronization_cvf;


    py::class_<ofdm_synchronization_cvf,
               gr::block,
               gr::basic_block,
               std::shared_ptr<ofdm_synchronization_cvf>>(
        m, "ofdm_synchronization_cvf", D(ofdm_synchronization_cvf))

        .def(py::init(&ofdm_synchronization_cvf::make),
             py::arg("symbol_length"),
             py::arg("cyclic_prefix_lenght"),
             py::arg("fft_length"),
             py::arg("symbols_per_frame"),
             D(ofdm_synchronization_cvf, make))


        ;
}
